I"SX<h2 id="51-adding-a-custom-mapper">5.1 Adding a custom mapper</h2>

<p>By default every JSON which is received by the <code class="highlighter-rouge">one</code>, <code class="highlighter-rouge">findOne</code>, <code class="highlighter-rouge">page</code>
and <code class="highlighter-rouge">list</code> is mapped by this function:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">defaultMapper</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">json</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">,</span> <span class="nx">Class</span><span class="p">:</span> <span class="p">{</span> <span class="k">new</span> <span class="p">():</span> <span class="nx">T</span> <span class="p">}):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">makeInstance</span><span class="p">(</span><span class="nx">Class</span><span class="p">,</span> <span class="nx">json</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It simply makes an instance of the class by calling the <code class="highlighter-rouge">makeInstance</code>
util function with the retrieved JSON.</p>

<p>Sometimes you want to override the default mapper, in the example
below we create a <code class="highlighter-rouge">Pokeball</code> which contains a pokemon. What we want
is to make the pokemon an actual instance of <code class="highlighter-rouge">Pokemon</code>. We also want
to store the time of retrieval from the back-end.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Pokeball</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokeball</span><span class="o">&gt;</span><span class="p">({</span>
  <span class="na">baseUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api/pokeball</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">mapper</span><span class="p">:</span> <span class="nx">pokeballMapper</span><span class="p">,</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="kr">public</span> <span class="nx">id</span><span class="p">?:</span> <span class="nx">number</span><span class="p">;</span>

  <span class="cm">/*
    In the actual JSON response pokemon is simply an object.
    But our custom mapper makes sure it will also get mapped.
  */</span>
  <span class="kr">public</span> <span class="nx">pokemon</span><span class="o">!</span><span class="p">:</span> <span class="nx">Pokemon</span><span class="p">;</span>

  <span class="cm">/* 
    Does not really exist on the back-end but is filled by the
    custom mapper.
  */</span>
  <span class="kr">public</span> <span class="nx">retrievedAt</span><span class="o">!</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">pokeballMapper</span><span class="p">(</span><span class="nx">json</span><span class="p">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">Class</span><span class="p">:</span> <span class="p">{</span> <span class="k">new</span> <span class="p">():</span> <span class="nx">Pokeball</span> <span class="p">}):</span> <span class="nx">Pokeball</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">pokeball</span> <span class="o">=</span> <span class="nx">makeInstance</span><span class="p">(</span><span class="nx">Class</span><span class="p">,</span> <span class="nx">json</span><span class="p">);</span>
  <span class="cm">/* Add a completely new field */</span>
  <span class="nx">pokeball</span><span class="p">.</span><span class="nx">retrievedAt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>

  <span class="cm">/* Make the fetched pokemon an actual instance of Pokemon */</span>
  <span class="nx">pokeball</span><span class="p">.</span><span class="nx">pokemon</span> <span class="o">=</span> <span class="nx">makeInstance</span><span class="p">(</span><span class="nx">Pokemon</span><span class="p">,</span> <span class="nx">pokeball</span><span class="p">.</span><span class="nx">pokemon</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">pokeball</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A custom mapper is useful for when the mapping for <code class="highlighter-rouge">one</code>, <code class="highlighter-rouge">findOne</code>, <code class="highlighter-rouge">page</code>
and <code class="highlighter-rouge">list</code> is exactly the same. If they differ you should instead create
custom methods instead, as explained below.</p>

<h2 id="52-adding-custom-methods-on-pokemon">5.2 Adding custom methods on Pokemon</h2>

<p>For most situations the default Resource will work just fine, but sometimes you do want to extend and/or customize the available methods from <code class="highlighter-rouge">makeResource</code>.</p>

<p>The trick here is that this library exposes the same building
blocks that <strong><em>makeResource</em></strong> uses under the hood. You can use these
building blocks to easily create your own custom methods.</p>

<p>See the <a href="https://42bv.github.io/mad-spring-connect/utils">Utils</a> section for the
helper functions. It is recommended that you use these functions to help you customize your Resource.</p>

<h3 id="521-adding-instance-methods">5.2.1 adding instance methods</h3>

<p>Say you want to add method which retrieves all the evolutions of a Pok√©mon,
this is how you do it:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="kd">get</span><span class="p">,</span> <span class="nx">makeInstance</span><span class="p">,</span> <span class="nx">makeResource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@42.nl/spring-connect</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* shortend the definition of the pokemon class. */</span>

  <span class="k">async</span> <span class="nx">evolutions</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="cm">/* `get` does a GET request  */</span>
      <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">await</span> <span class="kd">get</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">baseUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">/evolutions`</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">properties</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="cm">/* Convert to Pokemon instances */</span>
        <span class="k">return</span> <span class="nx">makeInstance</span><span class="p">(</span><span class="nx">Pokemon</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([]);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now you can use it in the following way:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">bulbasaur</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">pokemon</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">evolutions</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">pokemon</span><span class="p">.</span><span class="nx">evolutions</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="522-adding-static-methods">5.2.2 adding static methods</h3>

<p>You could also solve this problem with a static method:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="kd">get</span><span class="p">,</span> <span class="nx">makeInstance</span><span class="p">,</span> <span class="nx">makeResource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@42.nl/spring-connect</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* shortend the definition of the pokemon class. */</span>

  <span class="kd">static</span> <span class="k">async</span> <span class="nx">evolutions</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="cm">/* `get` does a GET request */</span>
    <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">await</span> <span class="kd">get</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">baseUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">/evolutions`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">properties</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="cm">/* Convert to Pokemon instances */</span>
      <span class="k">return</span> <span class="nx">makeInstance</span><span class="p">(</span><span class="nx">Pokemon</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Which you could use like this:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">evolutions</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Pokemon</span><span class="p">.</span><span class="nx">evolutions</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="53-overriding-methods-on-pokemon">5.3 Overriding methods on Pokemon</h2>

<p>Sometimes you will find that the default implementations does not match
your domain. For example there might be a difference between an Entity
in a List / Page or when it is retrieved alone.</p>

<h3 id="531-overriding-instance-methods">5.3.1 Overriding instance methods</h3>

<p>You can override <code class="highlighter-rouge">save</code> and <code class="highlighter-rouge">remove</code> by simply defining them.</p>

<p>This example defines its own custom <code class="highlighter-rouge">save</code> implementation:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeResource</span><span class="p">,</span> <span class="nx">post</span><span class="p">,</span> <span class="nx">put</span><span class="p">,</span> <span class="nx">Page</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@42.nl/spring-connect</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">merge</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nx">trainer</span><span class="o">!</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nx">types</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>
  <span class="nx">weakness</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>

  <span class="cm">/*
    Here we provide a custom implementation, which always creates
    a new pokemon, and never updates one.
  */</span>
  <span class="nx">save</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">post</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">,</span> <span class="k">this</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="na">json</span><span class="p">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">json</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="532-overriding-static-methods">5.3.2 Overriding static methods</h3>

<p>You can override <code class="highlighter-rouge">one</code>, <code class="highlighter-rouge">findOne</code>, <code class="highlighter-rouge">list</code> and <code class="highlighter-rouge">page</code> by simply defining them.</p>

<p>This example defines its own custom <code class="highlighter-rouge">page</code> implementation:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeResource</span><span class="p">,</span> <span class="kd">get</span><span class="p">,</span> <span class="nx">makeInstance</span><span class="p">,</span> <span class="nx">Page</span><span class="p">,</span> <span class="nx">QueryParams</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@42.nl/spring-connect</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/* When a pokemon is retrieved in a page it has less info. */</span>
<span class="k">export</span> <span class="nx">type</span> <span class="nx">PagePokemon</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
 
  <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nx">types</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>
  <span class="nx">weakness</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>

  <span class="cm">/*
    Here we provide a custom implementation, which returns a PagePokemon
    instead of a Pokemon.
  */</span>
  <span class="kd">static</span> <span class="nx">page</span><span class="o">&lt;</span><span class="nx">PagePokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">queryParams</span><span class="p">?:</span> <span class="nx">QueryParams</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Page</span><span class="o">&lt;</span><span class="nx">PagePokemon</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">get</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">,</span> <span class="nx">queryParams</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="54-changing-the-type-of-type-id-field">5.4 Changing the type of type id field.</h2>

<p>You can change the type of the id field by supplying a second generic
parameter to <code class="highlighter-rouge">makeResource</code>:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="p">,</span> <span class="nx">string</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">baseUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">public</span> <span class="nx">id</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">types</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pokemon</span><span class="p">();</span>

<span class="c1">// This should now work because the type of ID is now a string.</span>
<span class="nx">pokemon</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">a-unique-uu-id-for-example</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">pokemon</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bulbasaur</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">pokemon</span><span class="p">.</span><span class="nx">types</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">poison</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">grass</span><span class="dl">'</span><span class="p">];</span>

<span class="k">await</span> <span class="nx">pokemon</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>

</code></pre></div></div>
:ET