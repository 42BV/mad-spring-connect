I"¹<p>First we must define what a Resource means: A resource is a class
which extends the following class:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="nx">declare</span> <span class="kd">class</span> <span class="nx">Resource</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kr">public</span> <span class="nx">id</span><span class="p">?:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">save</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">remove</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">public</span> <span class="kd">static</span> <span class="nx">one</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="na">id</span><span class="p">:</span> <span class="nx">number</span> <span class="o">|</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">queryParams</span><span class="p">?:</span> <span class="nx">QueryParams</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">public</span> <span class="kd">static</span> <span class="nx">findOne</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="na">queryParams</span><span class="p">:</span> <span class="nx">QueryParams</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">|</span> <span class="k">void</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">public</span> <span class="kd">static</span> <span class="nx">list</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">queryParams</span><span class="p">?:</span> <span class="nx">QueryParams</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">public</span> <span class="kd">static</span> <span class="nx">page</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">queryParams</span><span class="p">?:</span> <span class="nx">QueryParams</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Page</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lets say we want to define a Pokemon resource, we would go about it in the following way:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeResource</span><span class="p">,</span> <span class="nx">Page</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@42.nl/spring-connect</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Pokemon</span> <span class="kd">extends</span> <span class="nx">makeResource</span><span class="o">&lt;</span><span class="nx">Pokemon</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/pokemon</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* 
    These are the properties of the pokemon which it has when it is
    fetched from the back-end. Note that `!`, TypeScript needs this
    to accept that the properties will be there once the resource
    is loaded.

    When creating a `new Pokemon` all properties will actually be
    empty. But this is a nice trade-off to prevent the programmer
    from having to do excessive null checks.
  */</span>

  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nx">types</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The argument to <code class="highlighter-rouge">makeResource</code> is the <code class="highlighter-rouge">baseUrl</code> used to fetch the Resourceâ€™ data from the REST API.
We have now created a <code class="highlighter-rouge">Pokemon</code> Resource, lets see how we can use it.</p>
:ET